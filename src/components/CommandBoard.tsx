/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useContext, useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import Screen from './Screen'
import LFOLed from './LFOLed'
import BoutonPress from './BoutonPress'
import { CTX } from '../context/Store'
import WaveShapeSelect from './WaveShapeSelect'
import Slider from './Slider'
import Pignon from './Pignon'
import { PignonModel } from './PignonModel'
import Adsr from './Adsr'
import Switch from './Switch'

type GLTFResult = GLTF & {
  nodes: {
    Cube022: THREE.Mesh
    Cube022_1: THREE.Mesh
    Attack_Slider: THREE.Mesh
    Decay_slider: THREE.Mesh
    Frequency_Slider: THREE.Mesh
    Cylinder007: THREE.Mesh
    Cylinder007_1: THREE.Mesh
    Highpass_Slider: THREE.Mesh
    LFO_Destination_Slider: THREE.Mesh
    Cylinder007: THREE.Mesh
    Cylinder007_1: THREE.Mesh
    LFO_led: THREE.Mesh
    Cylinder007: THREE.Mesh
    Cylinder007_1: THREE.Mesh
    LFO_SawTooth: THREE.Mesh
    LFO_Sin_Freq: THREE.Mesh
    LFO_Square: THREE.Mesh
    LFO_Triangle: THREE.Mesh
    Cylinder007: THREE.Mesh
    Cylinder007_1: THREE.Mesh
    Lowpass_Slider: THREE.Mesh
    Realease_Slider: THREE.Mesh
    SawTooth: THREE.Mesh
    Screen_display_mode: THREE.Mesh
    Sin_Freq: THREE.Mesh
    Square: THREE.Mesh
    Sustain_Slider: THREE.Mesh
    Triangle: THREE.Mesh
    Screen: THREE.Mesh
  }
  materials: {
    ['Material.003']: THREE.MeshStandardMaterial
    Slider: THREE.MeshStandardMaterial
    ['Material.002']: THREE.MeshStandardMaterial
    Led: THREE.MeshStandardMaterial
    ['Sawtooth Wave']: THREE.MeshStandardMaterial
    ['Sin Wave']: THREE.MeshStandardMaterial
    ['Square Wave']: THREE.MeshStandardMaterial
    ['Triangle Wave']: THREE.MeshStandardMaterial
    ['Screen Texture']: THREE.MeshStandardMaterial
  }
}

export function CommandBoard(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/3DModels/Command board.glb') as GLTFResult
  const [appState,updateState]=useContext(CTX)
  const [screenType, setScreenType] = useState<"onde"|"freq">("onde")
  return (
    <group {...props} dispose={null}>
      <group name="Scene">
        <group name="Synthe_body003" position={[0, 0.003, 0.002]}>
          <mesh
            name="Cube022"
            castShadow
            receiveShadow
            geometry={nodes.Cube022.geometry}
            material={materials['Material.003']}
          />
          <mesh
            name="Cube022_1"
            castShadow
            receiveShadow
            geometry={nodes.Cube022_1.geometry}
            material={materials['Material.003']}
          />
        </group>
        <group
          name="Command_Board_origin"
          position={[0.164, 0.199, -0.141]}
          rotation={[Math.PI / 5, 0, 0]}>
          <Slider
            min={60}
            max={40000}
            logarythm
            value={appState.generalSettings.frequency}
            onChange={(e)=>{
                updateState({type:"CHANGE_GENERAL_SETTINGS",payload:{id:"frequency",value:e}})
            }} 
            range={[-0.33,0.3]}
          >
            <mesh
                name="Frequency_Slider"
                castShadow
                receiveShadow
                geometry={nodes.Frequency_Slider.geometry}
                material={materials.Slider}
                position={[-0.889, 0.028, 0.063]}
                scale={0.306}
            />
          </Slider>
          <Slider logarythm 
            min={10}
            max={30000}
            value={appState.filterSettings.lowPass.frequency}
            onChange={(e)=>{
                updateState({type:"CHANGE_FILTER",payload:{id:"frequency",value:e,filter:"lowPass"}})
            }} 
            range={[-0.24,0.24]}
            >
                <mesh
                    name="Lowpass_Slider"
                    castShadow
                    receiveShadow
                    geometry={nodes.Lowpass_Slider.geometry}
                    material={materials.Slider}
                    position={[-1.116, 0.025, -0.006]}
                    scale={0.306}
                />
            </Slider>
            <PignonModel
              name={"highpass resonnance"}
              position={[-1.257, 0, 0.370]}
              scale={0.041}
              value={appState.filterSettings.highPass.Q}
              onChange={(e)=>{
                updateState({type:"CHANGE_FILTER",payload:{id:"Q",value:e,filter:"highPass"}})
              }}
            />
            <PignonModel
            min={0} max={50}
            valuePerTurn={50}
              name="Low_pass_Resonance"
              position={[-1.122, 0,  0.370]}
              scale={0.041}
              value={appState.filterSettings.lowPass.Q}
              onChange={(e)=>{
                updateState({type:"CHANGE_FILTER",payload:{id:"Q",value:e,filter:"lowPass"}})
              }}
            />
                        
          <Slider logarythm 
            min={10}
            max={30000}
            value={appState.filterSettings.highPass.frequency}
            onChange={(e)=>{
                updateState({type:"CHANGE_FILTER",payload:{id:"frequency",value:e,filter:"highPass"}})
            }} 
            range={[-0.24,0.24]}
            >
              <mesh
                  name="Highpass_Slider"
                  castShadow
                  receiveShadow
                  geometry={nodes.Highpass_Slider.geometry}
                  material={materials.Slider}
                  position={[-1.255, 0.025, -0.006]}
                  scale={0.306}
              />
            </Slider>
            <Slider 
            value={["gain","detune","lowpass","none"].findIndex(e=>appState.lfo.destination===e)}
                onChange={(e)=>{
                     const values =["gain","detune","lowpass","none"]
                     updateState({type:"CHANGE_LFO_SETTINGS",payload:{id:"destination",value:values[e]||"none"}})
                }} 
                min={0} 
                max={3} 
                
                // logarythm
                permitedValues={[0,1,2,3]} 
                 range={[-0.19,-0.005]}
                 position={[0.733, 0.014, 0.26]}
            >
            <mesh
                name="LFO_Destination_Slider"
                castShadow
                receiveShadow
                geometry={nodes.LFO_Destination_Slider.geometry}
                material={nodes.LFO_Destination_Slider.material}
                
                rotation={[0.021, Math.PI / 2, 0]}
                scale={0.025}
            />
          </Slider>
          
          <mesh
            name="LFO_led"
            castShadow
            receiveShadow
            geometry={nodes.LFO_led.geometry}
            // material={materials.Led}
            position={[0.93, -0.005, 0.207]}
            rotation={[0.005, 0, 0]}
            scale={0.025}
          >
            <LFOLed/>
            </mesh>
            <PignonModel scale={0.04}  min={0.1} max={10}
            valuePerTurn={10}
            position={[0.532, 0, 0.245]}
            onChange={(e)=>{updateState({type:"CHANGE_LFO_SETTINGS",payload:{id:"frequency",value:e}})}}
            />
          <PignonModel position={[0.532, 0, 0.414]} scale={0.04} min={0} max={1500} valuePerTurn={1500}
              onChange={(e)=>{updateState({type:"CHANGE_LFO_SETTINGS",payload:{id:"gain",value:e}})}}
          />
          
          
          <WaveShapeSelect
            geometry={nodes.LFO_Sin_Freq.geometry}
            position={[0.644, 0, 0.34]}
            scale={0.028}
            gap={2.5}
            materials={{sine:materials['Sin Wave'],sawtooth:materials['Sawtooth Wave'],square:materials['Square Wave'],triangle:materials['Triangle Wave']}}
            value={appState.lfo.type}
            onChange={(e)=>{
              updateState({type:"CHANGE_LFO_SETTINGS",payload:{id:"type",value:e}})
            }}
          />


          
          <Adsr
            gap={0.48}
            position={[0.49, 0.022, -0.158]}
            scale={0.262}
          />


        <WaveShapeSelect gap={4}
                            position={[-0.758, 0.006, 0.138]}
                            scale={0.043}
        value={appState.generalSettings.type}
            onChange={(e)=>{
              updateState({type:"CHANGE_GENERAL_SETTINGS",payload:{id:"type",value:e}})
            }}
            materials={{sine:materials['Sin Wave'],sawtooth:materials['Sawtooth Wave'],square:materials['Square Wave'],triangle:materials['Triangle Wave']}}
        geometry={nodes.SawTooth.geometry}/>
         <Switch onChange={(value)=>setScreenType(value?"freq":"onde")}  amplitude={0.1}>
          <mesh
              name="Screen_display_mode"
              castShadow
              receiveShadow
              geometry={nodes.Screen_display_mode.geometry}
              material={nodes.Screen_display_mode.material}
              position={[-0.165, 0, -0.458]}
              scale={0.035}
            />
        </Switch>

        </group>

        <mesh
          name="Screen"
          castShadow
          receiveShadow
          geometry={nodes.Screen.geometry}
        //   material={materials['Screen Texture']}
          position={[0.164, 0.199, 0.13]}
        >
            <Screen screenType={screenType}/>
            </mesh>
      </group>
    </group>
  )
}

useGLTF.preload('/3DModels/Command board.glb')
