/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    BlackKey: THREE.Mesh
  }
  materials: {
    ['Material.001']: THREE.MeshStandardMaterial
  }
}

export function BlackKey(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/3DModels/BlackKey.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <mesh
        name="BlackKey"
        castShadow
        receiveShadow
        geometry={nodes.BlackKey.geometry}
        material={!props.children? undefined: materials['Material.001']}
        >
        {props.children}:
        </mesh>
    </group>
  )
}

useGLTF.preload('3DModels/BlackKey.glb')
